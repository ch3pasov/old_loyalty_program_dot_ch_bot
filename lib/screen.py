import global_vars
import server.server_vars
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup

users = global_vars.users

home_new_text = '''–ü—Ä–∏–≤–µ—Ç! üññüèª
–Ø –ø—Ä–æ–≤–æ–∂—É –ü–†–û–ì–†–ê–ú–ú–£ –õ–û–Ø–õ–¨–ù–û–°–¢–ò üò≥ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ @dot_ch.

–ü—Ä–∞–≤–∏–ª–∞ —Ç–∞–∫–∏–µ:
1. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª: üëâüèª @dot_ch.
2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è —É –±–æ—Ç–∞ –≤ –ü–†–û–ì–†–ê–ú–ú–ï –õ–û–Ø–õ–¨–ù–û–°–¢–ò (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ –±—ã–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —á—ë —ç—Ç–æ —è —Ç–µ–±–µ –ø–∏—à—É ü§î).
3. –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–¥–Ω–∏–º–∞–µ—à—å —É—Ä–æ–≤–µ–Ω—å ‚òùüèª.
4. –ó–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–µ–Ω—è —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –º–æ–Ω–µ—Ç–∫–∏ TON (—á–µ—Ä–µ–∑ @wallet).

–£–≤–∏–¥–µ—Ç—å –Ω—ã–Ω–µ—à–Ω—é—é —Å–µ—Ç–∫—É —É—Ä–æ–≤–Ω–µ–π –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ü–†–û–ì–†–ê–ú–ú–ï –õ–û–Ø–õ–¨–ù–û–°–¢–ò —Ç—ã –º–æ–∂–µ—à—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:'''

home_exist_text = '''–ü—Ä–∏–≤–µ—Ç, —é–∑–µ—Ä —Å –Ω–æ–º–µ—Ä–æ–º {user_id}! üò≥

–£–≤–∏–¥–µ—Ç—å —Å–µ—Ç–∫—É —É—Ä–æ–≤–Ω–µ–π, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–≥–ª—è–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—ã –º–æ–∂–µ—à—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:'''

loyality_schema_level = """**üë§ —É—Ä–æ–≤–µ–Ω—å: {level}**
üóì –î–Ω–µ–π, –¥–ª—è –ª–µ–≤–µ–ª–∞–ø–∞: {days}
ü™ô –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏ –ª–µ–≤–µ–ª–∞–ø–µ –≤ TON: {reward}"""

loyality_schema_cooked = '\n\n'.join([loyality_schema_level.format(**line.__dict__) for line in server.server_vars.loyality_programm])

button_to_schema = '''üìà—Å–µ—Ç–∫–∞ —É—Ä–æ–≤–Ω–µ–πüìà'''
button_to_home = '''üèò–Ω–∞ –≥–ª–∞–≤–Ω—É—éüèò'''
button_to_register = '''‚ùáÔ∏è—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è‚ùáÔ∏è'''
button_to_statistic = '''üìä—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä'''
button_to_leveling = '''üîÑ–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—åüîÑ'''


def home_new():
    return {
        "text": home_new_text,
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_schema,
                        callback_data="to_schema"
                    )
                ],
                [
                    InlineKeyboardButton(
                        button_to_register,
                        callback_data="to_register"
                    )
                ]
            ]
        )
    }


def home_exist(user_id):
    return {
        "text": home_exist_text.format(user_id=user_id),
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_leveling,
                        callback_data="to_leveling"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        button_to_schema,
                        callback_data="to_schema"
                    ),
                    InlineKeyboardButton(
                        button_to_statistic,
                        callback_data="to_statistic"
                    )
                ]
            ]
        )
    }


def loyality_schema():
    return {
        "text": loyality_schema_cooked,
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def loading():
    return {
        "text": 'loading...'
    }


def register_already_register():
    return {
        "text": '–¢—ã —É–∂–µ –≤ –ü–†–û–ì–†–ê–ú–ú–ï –õ–û–Ø–õ–¨–ù–û–°–¢–ò!',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def register_not_subscribed():
    return {
        "text": '–¢—ã –∑–∞–±—ã–ª –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è. üò¨\n–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\nüëâüèª@dot_chüëàüèø',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ],
                [
                    InlineKeyboardButton(
                        button_to_register,
                        callback_data="to_register"
                    )
                ]
            ]
        )
    }


def register_successfully_emoji():
    return {
        "text": "ü•≥"
    }


def register_successfully():
    return {
        "text": '–ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def leveling(user_level, user_exp_days):
    global users
    return {
        "text": f'''–¢–≤–æ–π –Ω—ã–Ω–µ—à–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {user_level}\n–¢—ã –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª {user_exp_days:.4f} –¥–Ω–µ–π!''',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_leveling,
                        callback_data="to_leveling"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def level_up(congrats_text, congrats_link):
    global users
    return {
        "text": "ü•≥LEVEL UPü•≥",
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        congrats_text,
                        url=congrats_link
                    )
                ],
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def money_hidden_block_check():
    return {
        "animation": server.server_vars.money_animation,
        "unsave": False
    }


def money(send_message):
    return {
        "text": send_message.message,
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "–ü–æ–ª—É—á–∏—Ç—å –Ω–∞ @wallet",
                        url=send_message.reply_markup.rows[0].buttons[0].url
                    )
                ]
            ]
        )
    }


def statistic():
    global users
    return {
        "text": f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def no_messages():
    return {
        "text": '''–ù–µ —á–∏—Ç–∞—é —Ç–≤–æ–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. üôà\n–õ—É—á—à–µ –ø–æ–ø—Ä–æ–±—É–π /start!'''
    }


def no_voices():
    return {
        "text": '''–ù–µ —Å–ª—É—à–∞—é —Ç–≤–æ–∏ –≤–æ–π—Å—ã. üôâ\n–õ—É—á—à–µ –ø–æ–ø—Ä–æ–±—É–π /start!'''
    }


def no_video_notes():
    return {
        "text": '''–ù–µ —Å–ª—É—à–∞—é –∏ –Ω–µ —Å–º–æ—Ç—Ä—é —Ç–≤–æ–∏ –±–ª–∏–Ω—á–∏–∫–∏. üôâüôà\n–õ—É—á—à–µ –ø–æ–ø—Ä–æ–±—É–π /start!'''
    }


def unsubscribed_from_channel_gif():
    return {
        "animation": server.server_vars.unsubscribed_animation,
        "unsave": False
    }


def unsubscribed_from_channel():
    return {
        "text": 'üòì –¢—ã –ø—Ä–∏—Ö–æ–¥–∏, —Ö–æ—Ç—å –∏–Ω–æ–≥–¥–∞ üòì',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def create(client, chat_id, screen):
    if "animation" in screen:
        client.send_animation(
            chat_id,
            **screen
        )
        return 0

    client.send_message(
        chat_id,
        **screen
    )


def update(client, chat_id, message_id, screen):
    client.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        **screen
    )


def send_money(app, app_human, amount, user_id):
    global users

    assert amount < 1, "–ú–ù–û–ì–û –î–ï–ù–ï–ì"

    non_collision_amount = amount + int(user_id) % 100000/10**10

    r = app_human.get_inline_bot_results('@wallet', str(non_collision_amount))

    result = r.results[0]
    if "TON" in result.title and "BTC" not in result.title:
        app_human.send_inline_bot_result(server.server_vars.money_chat_id, r.query_id, result.id)
        app_human.send_message(server.server_vars.money_chat_id, f"–æ—Ç–ø—Ä–∞–≤–∏–ª {amount} TON —é–∑–µ—Ä—É {user_id}")

        create(app, user_id, money(result.send_message))
    else:
        raise ValueError("BTC! –°–õ–ï–í–ê –ù–ê–ü–†–ê–í–û")
