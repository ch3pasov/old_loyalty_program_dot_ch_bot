import global_vars
import server.server_vars
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from lib.useful_lib import seconds_from_timestamp, timestamp_to_datetime
from global_vars import users


bot_username = global_vars.bot_username

home_new_text = '''–ü—Ä–∏–≤–µ—Ç! üññüèª
–Ø –ø—Ä–æ–≤–æ–∂—É –ü–†–û–ì–†–ê–ú–ú–£ –õ–û–Ø–õ–¨–ù–û–°–¢–ò üò≥ —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–∞ @dot_ch.

–ü—Ä–∞–≤–∏–ª–∞ —Ç–∞–∫–∏–µ:
1. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª: üëâüèª @dot_ch.
2. –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—à—å—Å—è —É –±–æ—Ç–∞ –≤ –ü–†–û–ì–†–ê–ú–ú–ï –õ–û–Ø–õ–¨–ù–û–°–¢–ò (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –Ω–µ –±—ã–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ —á—ë —ç—Ç–æ —è —Ç–µ–±–µ –ø–∏—à—É ü§î).
3. –ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–¥–Ω–∏–º–∞–µ—à—å —É—Ä–æ–≤–µ–Ω—å. ‚òùüèª
4. –ó–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–≤–µ–Ω—è —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –º–æ–Ω–µ—Ç–∫–∏ TON (—á–µ—Ä–µ–∑ @wallet).

–£–≤–∏–¥–µ—Ç—å –Ω—ã–Ω–µ—à–Ω—é—é —Å–µ—Ç–∫—É —É—Ä–æ–≤–Ω–µ–π –∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ü–†–û–ì–†–ê–ú–ú–ï –õ–û–Ø–õ–¨–ù–û–°–¢–ò —Ç—ã –º–æ–∂–µ—à—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:'''

home_exist_text = '''–ü—Ä–∏–≤–µ—Ç, —é–∑–µ—Ä —Å ID `{user_id}`! üò≥

–£–≤–∏–¥–µ—Ç—å —Å–µ—Ç–∫—É —É—Ä–æ–≤–Ω–µ–π, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å –∏ –ø–æ–≥–ª—è–¥–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç—ã –º–æ–∂–µ—à—å –ø–æ –∫–Ω–æ–ø–∫–∞–º –Ω–∏–∂–µ:'''

loyality_schema_level = """**üë§ —É—Ä–æ–≤–µ–Ω—å: {level}**
üóì –î–Ω–µ–π, –¥–ª—è –ª–µ–≤–µ–ª–∞–ø–∞: {days}
ü™ô –ù–∞–≥—Ä–∞–¥–∞ –ø—Ä–∏ –ª–µ–≤–µ–ª–∞–ø–µ –≤ TON: {reward}"""

loyality_schema_cooked = '\n\n'.join([loyality_schema_level.format(**line.__dict__) for line in server.server_vars.loyalty_program])

set_referer_not_number_text = '''–ü—Ä–∏–≤–µ—Ç! –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ —á–∏—Å–ª–µ–Ω–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ü–æ–ø—Ä–æ—Å–∏ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ –ø—Ä–∏—Å–ª–∞—Ç—å —Ç–µ–±–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –µ–≥–æ üë§–ø—Ä–æ—Ñ–∏–ª–µ–ºüë§ ‚Äî –µ–≥–æ ID –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ç—É–¥–∞.'''

referal_program_invite = '''‚Äî –±–æ—Ç üßû –ø—Ä–æ–≥—Ä–∞–º–º—ã üíæ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ ‚õì –∫–∞–Ω–∞–ª–∞ üó£ @dot_ch ü§ë.

**TL;DR** –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª, –ø–æ–ª—É—á–∞–µ—à—å TON-–Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ç–æ, —á—Ç–æ –Ω–µ –æ—Ç–ø–∏—Å—ã–≤–∞–µ—à—å—Å—è.

–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ–Ω—è –∫–∞–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –≤ –±–æ—Ç–µ –∏ –æ—Ç–∫—Ä–æ–π –º–æ—é —Å—Å—ã–ª–∫—É: t.me/{bot_username}?start=referer_id={my_id}.
–°–ø–∞—Å–∏–±–æ!'''

profile_text = '''–¢–≤–æ–π ID: `{user_id}`
–¢–≤–æ–π –Ω—ã–Ω–µ—à–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å: {user_level}
–¢–≤–æ–π —Å—Ç–∞–∂ –Ω–∞ –∫–∞–Ω–∞–ª–µ: {user_exp_days:.4f} –¥–Ω–µ–π!

–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_registration_time} (UTC)
–°—É–º–º–∞—Ä–Ω—ã–π –≤—ã–∏–≥—Ä—ã—à –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏: {user_money_won:.4f}
ID —Ç–≤–æ–µ–≥–æ —Ä–µ—Ñ–µ—Ä–µ—Ä–∞: `{user_referer_id}`'''

button_to_schema = '''üìà—Å–µ—Ç–∫–∞ —É—Ä–æ–≤–Ω–µ–πüìà'''
button_to_home = '''üèò–Ω–∞ –≥–ª–∞–≤–Ω—É—éüèò'''
button_to_register = '''‚ùáÔ∏è—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è‚ùáÔ∏è'''
button_to_statistic = '''üìä–ì–ª–æ–±–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞üìä'''
button_to_profile = '''üë§–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüë§'''
button_to_profile_refresh = '''üîÑ–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüîÑ'''
button_to_referal_program = '''üò≥–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞üò≥'''


def home_new():
    return {
        "text": home_new_text,
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_schema,
                        callback_data="to_schema"
                    )
                ],
                [
                    InlineKeyboardButton(
                        button_to_register,
                        callback_data="to_register"
                    )
                ]
            ]
        )
    }


def home_exist(user_id):
    return {
        "text": home_exist_text.format(user_id=user_id),
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_profile,
                        callback_data="to_profile"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        button_to_schema,
                        callback_data="to_schema"
                    ),
                    InlineKeyboardButton(
                        button_to_statistic,
                        callback_data="to_statistic"
                    )
                ]
            ]
        )
    }


def loyality_schema():
    return {
        "text": loyality_schema_cooked,
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def loading():
    return {
        "text": 'loading...'
    }


def register_already_register():
    return {
        "text": '–¢—ã —É–∂–µ –≤ –ü–†–û–ì–†–ê–ú–ú–ï –õ–û–Ø–õ–¨–ù–û–°–¢–ò!',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def register_not_subscribed():
    return {
        "text": '–¢—ã –∑–∞–±—ã–ª –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è. üò¨\n–ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.\nüëâüèª@dot_chüëàüèø',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ],
                [
                    InlineKeyboardButton(
                        button_to_register,
                        callback_data="to_register"
                    )
                ]
            ]
        )
    }


def register_successfully_emoji():
    return {
        "text": "ü•≥"
    }


def register_successfully():
    return {
        "text": '–ì–æ—Ç–æ–≤–æ! –° —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π!',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def profile(user_id):
    user_level = users[user_id]["loyalty_program"]["level"]
    user_exp_days = seconds_from_timestamp(users[user_id]["loyalty_program"]["subscribed_since"])/86400
    user_registration_time = timestamp_to_datetime(users[user_id]["registered_since"])
    user_money_won = users[user_id]["loyalty_program"]["money_won"]
    user_referer_id = users[user_id]["loyalty_program"]["referer_id"]

    return {
        "text": profile_text.format(
            user_id=user_id,
            user_level=user_level,
            user_exp_days=user_exp_days,
            user_registration_time=user_registration_time,
            user_money_won=user_money_won,
            user_referer_id=user_referer_id
        ),
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_profile_refresh,
                        callback_data="to_profile"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        button_to_referal_program,
                        callback_data="to_referal_program"
                    ),
                ],
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def level_up(congrats_text, congrats_link):
    return {
        "text": "ü•≥LEVEL UPü•≥",
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        congrats_text,
                        url=congrats_link
                    )
                ]
            ]
        )
    }


def statistic():
    users_cnt = len(users)
    users_win = sum([float(users[user]['loyalty_program']['money_won']) for user in users])
    return {
        "text": f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_cnt}\n–ü–æ–ª—É—á–µ–Ω–æ —Å—É–º–º–∞—Ä–Ω–æ: {users_win} TON.',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def referal_program(user_id):
    return {
        "text": '–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞!',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(  # Opens the inline interface in the current chat
                        "–î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞",
                        switch_inline_query_current_chat="–¥–æ–±–∞–≤–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ —Å ID: "
                    )
                ],
                [
                    InlineKeyboardButton(  # Opens the inline interface in the current chat
                        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞",
                        switch_inline_query=referal_program_invite.format(
                            bot_username=bot_username,
                            my_id=user_id
                        )
                    ),
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ],
            ]
        )
    }


def set_referer_confirm(referer_id):
    return {
        "text": f'–¢—ã —Ö–æ—á–µ—à—å –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Å–≤–æ–∏–º —Ä–µ—Ñ–µ—Ä–µ—Ä–æ–º —é–∑–µ—Ä–∞ —Å ID=`{referer_id}`?',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "–î–∞!",
                        callback_data=f"to_set_referer?referer_id={referer_id}"
                    ),
                    InlineKeyboardButton(
                        "–ù–µ—Ç!!!",
                        callback_data="to_referal_program"
                    )
                ],
            ]
        )
    }


def set_referer_smth_wrong(text):
    return {
        "text": text,
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "–ö —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ",
                        callback_data="to_referal_program"
                    )
                ],
            ]
        )
    }


def set_referer_successfully_emoji():
    return {
        "text": "ü•≥"
    }


def set_referer_successfully():
    return {
        "text": '–ì–æ—Ç–æ–≤–æ! –†–µ—Ñ–µ—Ä–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_referal_program,
                        callback_data="to_referal_program"
                    )
                ]
            ]
        )
    }


def unknown_command():
    return {
        "text": '''–ü—Ä–∏–≤–µ—Ç! –í–∏–∂—É, —á—Ç–æ —Ç—ã –ø—ã—Ç–∞–µ—à—å—Å—è –≤–≤–µ—Å—Ç–∏ –∫–∞–∫—É—é-—Ç–æ –∫–æ–º–∞–Ω–¥—É, –Ω–æ —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç.''',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def set_referer_not_number():
    return {
        "text": set_referer_not_number_text,
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_profile,
                        callback_data="to_profile"
                    )
                ]
            ]
        )
    }


def no_messages():
    return {
        "text": '''–ù–µ —á–∏—Ç–∞—é —Ç–≤–æ–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. üôà\n–õ—É—á—à–µ –ø–æ–ø—Ä–æ–±—É–π /start!'''
    }


def no_voices():
    return {
        "text": '''–ù–µ —Å–ª—É—à–∞—é —Ç–≤–æ–∏ –≤–æ–π—Å—ã. üôâ\n–õ—É—á—à–µ –ø–æ–ø—Ä–æ–±—É–π /start!'''
    }


def no_video_notes():
    return {
        "text": '''–ù–µ —Å–ª—É—à–∞—é –∏ –Ω–µ —Å–º–æ—Ç—Ä—é —Ç–≤–æ–∏ –±–ª–∏–Ω—á–∏–∫–∏. üôâüôà\n–õ—É—á—à–µ –ø–æ–ø—Ä–æ–±—É–π /start!'''
    }


def unsubscribed_from_channel_gif():
    return {
        "animation": server.server_vars.unsubscribed_animation,
        "unsave": False
    }


def unsubscribed_from_channel():
    return {
        "text": 'üòì –¢—ã –ø—Ä–∏—Ö–æ–¥–∏, —Ö–æ—Ç—å –∏–Ω–æ–≥–¥–∞ üòì',
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        button_to_home,
                        callback_data="to_home"
                    )
                ]
            ]
        )
    }


def money_hidden_block_check(text="üí∏"):
    return {
        "text": text
    }


def money(send_message, text=None, button_text=None, reply_to_message_id=None):
    return {
        "text": send_message.message if not text else text,
        "reply_markup": InlineKeyboardMarkup(
            [
                [
                    InlineKeyboardButton(
                        "–ü–æ–ª—É—á–∏—Ç—å –Ω–∞ @wallet" if not button_text else button_text,
                        url=send_message.reply_markup.rows[0].buttons[0].url
                    )
                ]
            ]
        ),
        "reply_to_message_id": reply_to_message_id
    }


def create(client, chat_id, screen):
    if "animation" in screen:
        client.send_animation(
            chat_id,
            **screen
        )
        return 0

    client.send_message(
        chat_id,
        **screen
    )


def update(client, chat_id, message_id, screen):
    client.edit_message_text(
        chat_id=chat_id,
        message_id=message_id,
        **screen
    )
